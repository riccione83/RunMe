//
//  RunMeButton.m
//  RunMe!
//
//  Created by Riccardo Rizzo on 11/07/16.
//  Copyright (c) 2016 Riccardo Rizzo. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "RunMeButton.h"


@implementation RunMeButton

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawBlueButton:(CGRect)rect
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.157 green: 0.325 blue: 0.529 alpha: 1];
    UIColor* color2 = [UIColor colorWithRed: 0.32 green: 0.666 blue: 0.8 alpha: 0.653];

    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 0.42, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)color.CGColor, (id)[color blendedColorWithFraction: 0.5 ofColor: color2].CGColor, (id)color2.CGColor], gradientLocations);

    //// Frames
    CGRect frame = rect;


    //// Group
    {
        //// Rectangle Drawing
        CGRect rectangleRect = CGRectMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 5, floor((CGRectGetWidth(frame) - 4) * 0.98592 + 0.5), floor((CGRectGetHeight(frame) - 5) * 0.91489 + 0.5));
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 10];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, gradient,
            CGPointMake(CGRectGetMinX(rectangleRect), CGRectGetMidY(rectangleRect)),
            CGPointMake(CGRectGetMaxX(rectangleRect), CGRectGetMidY(rectangleRect)),
            0);
        CGContextRestoreGState(context);
        {
            NSString* textContent = @"\n";
            NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            rectangleStyle.alignment = NSTextAlignmentCenter;

            NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AvenirNext-UltraLight" size: 30], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

            CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, rectangleRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
            CGContextRestoreGState(context);
        }
    }


    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

@end



@implementation UIColor (PaintCodeAdditions)

- (UIColor*)blendedColorWithFraction: (CGFloat)fraction ofColor: (UIColor*)color2
{
    UIColor* color1 = self;

    CGFloat r1 = 0, g1 = 0, b1 = 0, a1 = 0;
    CGFloat r2 = 0, g2 = 0, b2 = 0, a2 = 0;


    [color1 getRed: &r1 green: &g1 blue: &b1 alpha: &a1];
    [color2 getRed: &r2 green: &g2 blue: &b2 alpha: &a2];

    CGFloat r = r1 * (1 - fraction) + r2 * fraction;
    CGFloat g = g1 * (1 - fraction) + g2 * fraction;
    CGFloat b = b1 * (1 - fraction) + b2 * fraction;
    CGFloat a = a1 * (1 - fraction) + a2 * fraction;

    return [UIColor colorWithRed: r green: g blue: b alpha: a];
}

@end
